{"version":3,"sources":["index.js"],"names":["express","require","cors","bcrypt","User","mongoose","Booking","Razorpay","jwt","bodyParser","multer","Place","app","bcryptSalt","genSaltSync","shortid","key_id","key_secret","req","Promise","resolve","reject","json","cookies","token","jwtSecret","err","userData","regeneratorRuntime","async","_context","prev","next","cookieParser","stop","use","fs","urlencoded","extended","__dirname","credentials","razorpay","process","MONGO_URL","res","connect","body","name","email","password","hashSync","userDoc","status","_context2","t0","post","_req$body2","_context3","awrap","findOne","sent","compareSync","sign","id","_id","cookie","get","verify","create","_ref","_context4","findById","console","log","link","newName","Date","now","imageDownloader","image","url","dest","photosMiddleware","array","uploadedFiles","i","files","length","_req$files$i","path","parts","originalname","split","newPath","renameSync","_req$body3","title","address","addedPhotos","description","price","extraInfo","passOk","time","maxParticipants","placeDoc","_context6","owner","photos","date","_context7","find","t1","call","_context8","params","_context9","toString","set","save","send","_context12","_context14","decoded","_req$body5","place","numberOfParticipants","phone","options","razorpayOrder","newBooking","savedBooking","_context13","abrupt","message","amount","currency","receipt","generate","payment_capture","orders","user","razorpayOrderId","error","ext","getUserDataFromReq","populate","listen"],"mappings":"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","file":"index.min.js","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst mongoose = require('mongoose');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('./models/User.js');\r\nconst Place = require('./models/Place.js');\r\nconst Booking = require('./models/Booking.js')\r\nconst cookieParser = require('cookie-parser');\r\nconst Razorpay = require('razorpay');\r\nconst shortid = require('shortid');\r\nconst bodyParser = require('body-parser');\r\nconst imageDownloader = require('image-downloader');\r\nconst multer = require('multer');\r\nconst fs = require('fs');\r\n\r\nrequire('dotenv').config();\r\nconst app = express();\r\n\r\nconst bcryptSalt = bcrypt.genSaltSync(10);\r\nconst jwtSecret = 'fasefraw4r5r3wq45wdfgw34twdfg';\r\n\r\nconst razorpay = new Razorpay({\r\n    key_id: 'rzp_test_4AAfE1spa0SuuG',\r\n    key_secret: 'LmVk3BAP6wDjj4Ls9Jw7onuU'\r\n});\r\n\r\napp.use(express.json());\r\napp.use(cookieParser());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use('/uploads', express.static(__dirname+'/uploads'));\r\napp.use(cors({\r\n    credentials: true,\r\n    origin: 'http://localhost:5173',\r\n}));\r\n\r\nmongoose.connect(process.env.MONGO_URL);\r\n  \r\nfunction getUserDataFromReq(req) {\r\n    return new Promise((resolve, reject) => {\r\n        jwt.verify(req.cookies.token, jwtSecret, {}, async (err, userData) => {\r\n            if (err) throw err;\r\n            resolve(userData);\r\n        });\r\n    });\r\n}\r\n\r\napp.get('/test', (req, res) => {\r\n    res.json('test ok');\r\n});\r\n\r\napp.post('/register', async (req,res) => {\r\n    const {name,email,password} = req.body;\r\n\r\n    try {\r\n        const userDoc = await User.create({\r\n            name,\r\n            email,\r\n            password:bcrypt.hashSync(password, bcryptSalt),\r\n        });\r\n        res.json(userDoc);\r\n    }\r\n    catch (e) {\r\n        res.status(422).json(e);\r\n    }\r\n});\r\n\r\napp.post('/login', async (req,res) => {\r\n    const {email, password} = req.body;\r\n    const userDoc = await User.findOne({email});\r\n    if (userDoc) {\r\n        const passOk = bcrypt.compareSync(password, userDoc.password);\r\n        if (passOk) {\r\n            jwt.sign({\r\n                email:userDoc.email, \r\n                id:userDoc._id\r\n            }, jwtSecret, {}, (err,token) => {\r\n                if (err) throw err;\r\n                res.cookie('token', token).json(userDoc);\r\n            });\r\n        }\r\n        else{\r\n            res.status(422).json('pass not ok')\r\n        }\r\n    }\r\n    else {\r\n        res.json('not found');\r\n    }\r\n});\r\n\r\napp.get('/profile', (req,res) => {\r\n    const {token} = req.cookies;\r\n    if (token) {\r\n        jwt.verify(token, jwtSecret, {}, async (err, userData) => {\r\n            if (err) throw err;\r\n            const {name,email,_id} = await User.findById(userData.id);\r\n            res.json({name,email,_id});\r\n        });\r\n    } else {\r\n        res.json(null);\r\n    }\r\n});\r\n\r\napp.post('/logout', (req,res) => {\r\n    res.cookie('token', '').json(true);\r\n}); \r\n\r\nconsole.log({__dirname})\r\napp.post('/upload-by-link', async (req,res) => {\r\n    const {link} = req.body;\r\n    const newName = 'photo' + Date.now() + '.jpg';\r\n    await imageDownloader.image({\r\n        url: link,\r\n        dest: __dirname + '/uploads/' +newName,\r\n    });\r\n    res.json(newName);\r\n});\r\n\r\nconst photosMiddleware = multer({dest:'uploads'});\r\napp.post('/upload', photosMiddleware.array('photos', 100), (req,res) => {\r\n    const uploadedFiles = [];\r\n    for (let i = 0; i < req.files.length; i++) {\r\n        const {path,originalname} = req.files[i];\r\n        const parts = originalname.split('.');\r\n        const ext = parts[parts.length - 1];\r\n        const newPath = path + '.' + ext;\r\n        fs.renameSync(path, newPath);\r\n        uploadedFiles.push(newPath.replace('uploads',''));\r\n    }\r\n    res.json(uploadedFiles);\r\n});\r\n\r\napp.post('/places', (req,res) => {\r\n    const {token} = req.cookies;\r\n    const {\r\n        title,address,addedPhotos,description,price,\r\n        extraInfo,date,time,maxParticipants,\r\n    } = req.body;\r\n    jwt.verify(token, jwtSecret, {}, async (err, userData) => {\r\n        if (err) throw err;\r\n        const placeDoc = await Place.create({\r\n            owner:userData.id,price,\r\n            title,address,photos:addedPhotos,description,\r\n            extraInfo,date,time,maxParticipants,\r\n        });\r\n        res.json(placeDoc);\r\n    });\r\n});\r\n\r\napp.get('/user-places', (req,res) => {\r\n    const {token} = req.cookies;\r\n    jwt.verify(token, jwtSecret, {}, async (err, userData) => {\r\n        const {id} = userData;\r\n        res.json( await Place.find({owner:id}) );\r\n    });\r\n});\r\n\r\napp.get('/places/:id', async (req,res) => {\r\n    const {id} = req.params;\r\n    res.json(await Place.findById(id));\r\n});\r\n\r\napp.put('/places', async (req,res) => {\r\n    const {token} = req.cookies;\r\n    const {\r\n        id, title,address,addedPhotos,description,\r\n        extraInfo,date,time,maxParticipants,price,\r\n    } = req.body;\r\n    jwt.verify(token, jwtSecret, {}, async (err, userData) => {\r\n        if (err) throw err;\r\n        const placeDoc = await Place.findById(id);\r\n        if (userData.id === placeDoc.owner.toString()) {\r\n            placeDoc.set({\r\n                title,address,photos:addedPhotos,description,\r\n                extraInfo,date,time,maxParticipants,price,\r\n            });\r\n            await placeDoc.save();\r\n            res.json('ok');\r\n        }\r\n    });\r\n});\r\n\r\napp.delete('/places/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    try {\r\n        await Place.findByIdAndDelete(id);\r\n        res.json('event deleted successfully');\r\n    } catch (error) {\r\n        console.error('Error deleting place:', error);\r\n        res.status(500).send('Internal Server Error');\r\n    }\r\n});\r\n\r\napp.get('/places', async (req,res) => {\r\n    res.json( await Place.find() );\r\n});\r\n\r\napp.post('/bookings', async (req, res) => {\r\n    try {\r\n        const {token} = req.cookies;\r\n\r\n        jwt.verify(token, jwtSecret, async (err, decoded) => {\r\n            if (err) {\r\n                return res.status(401).json({ message: 'Unauthorized' });\r\n            } else {\r\n                const userData = decoded;\r\n\r\n                const { place, numberOfParticipants, name, phone, price } = req.body;\r\n\r\n                const options = {\r\n                    amount: (price * 100), // Convert to paise\r\n                    currency: 'INR',\r\n                    receipt: shortid.generate(),\r\n                    payment_capture: 1\r\n                };\r\n\r\n                try {\r\n                    const razorpayOrder = await razorpay.orders.create(options);\r\n    \r\n                    const newBooking = new Booking({\r\n                        place,\r\n                        user: userData.id,\r\n                        numberOfParticipants,\r\n                        name,\r\n                        phone,\r\n                        price,\r\n                        razorpayOrderId: razorpayOrder.id,\r\n                    });\r\n    \r\n                    const savedBooking = await newBooking.save();\r\n                    res.json(savedBooking);\r\n                } catch (error) {\r\n                    console.error('Error creating Razorpay order:', error);\r\n                    res.status(500).send('Internal Server Error');\r\n                }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.log(error);\r\n        res.status(500).send('Internal Server Error');\r\n    }\r\n});\r\n\r\napp.get('/bookings', async (req,res) => {\r\n    const userData = await getUserDataFromReq(req);\r\n    res.json ( await Booking.find({user:userData.id}).populate('place') );\r\n});\r\n\r\napp.listen(4000);"]}